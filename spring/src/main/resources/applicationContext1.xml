<?xml version="1.0" encoding="UTF-8"?>
<!--
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    &lt;!&ndash;
        ·id: 容器内唯一
        ·class：被管理bean的完全限定名
        ·放入Spring容器的Bean，默认都是单例的 scope="singleton"
        ·scope="prototype" 每次获取的都是不同的对象实例
        ·Bean的对象默认会在Spring容器启动时创建。如果Bean的Scope值为prototype，那对象会在
        调用时创建;如果Bean的Scope为singleton时，将lazy-init的属性设置true，那么对象也会在
        调用时创建
    &ndash;&gt;

    &lt;!&ndash;<bean id="userDaoImpl" class="com.lsy.dao.impl.UserDaoImpl"/>&ndash;&gt;
    &lt;!&ndash;<bean id="userDaoImpl" class="com.lsy.dao.impl.UserDaoImpl" lazy-init="true"/>&ndash;&gt;
   &lt;!&ndash; <bean id="userDaoImpl" class="com.lsy.dao.impl.UserDaoImpl" scope="prototype"/>&ndash;&gt;
    &lt;!&ndash;别名&ndash;&gt;
   &lt;!&ndash; <alias name="userDaoImpl" alias="userDao"/>&ndash;&gt;



    <bean id="userDao" class="com.lsy.dao.impl.UserDaoImpl"/>
    &lt;!&ndash;
       autowire: constructor 先根据构造方法参数的名称去Spring中找被注入的对象，
       如果找不到再根据构造方法参数的类型去Spring中找被注入的对象
   &ndash;&gt;
    <bean id="userService" class="com.lsy.service.impl.UserServiceImpl" autowire="constructor"/>

    &lt;!&ndash;<bean id="userService" class="com.lsy.service.impl.UserServiceImpl">&ndash;&gt;

        &lt;!&ndash;根据构造方法参数的名称&ndash;&gt;
       &lt;!&ndash; <constructor-arg name="userDao" ref="userDao"/>&ndash;&gt;
        &lt;!&ndash;<constructor-arg name="name" ref="jack"/>&ndash;&gt;


        &lt;!&ndash;根据构造方法参数的类型：不适合有多个参数类型相同的情况&ndash;&gt;
        &lt;!&ndash;<constructor-arg type="com.lsy.dao.UserDao" ref="userDao"/>&ndash;&gt;

        &lt;!&ndash;根据构造方法参数的索引，从0开始&ndash;&gt;
        &lt;!&ndash;<constructor-arg index="0" ref="userDao"/>
&ndash;&gt;
       &lt;!&ndash; <property name="userDao" ref="userDao"/>&ndash;&gt;

        &lt;!&ndash;<property name="userDao">
            <bean class="com.lsy.dao.impl.UserDaoImpl"/>
        </property>&ndash;&gt;

       &lt;!&ndash; <property name="userDao">
            <ref bean="userDao"/>
        </property>&ndash;&gt;

        &lt;!&ndash;<property name="name" value="tom"/>
        <property name="age" value="12"/>
        <property name="list" >
            <list>
                <value>a1</value>
                <value>a2</value>
            </list>
        </property>

        <property name="set">
            <set>
                <value>22.34</value>
                <value>34.22</value>
            </set>
        </property>

        <property name="map">
            <map>
                <entry key="k1" value="v1"/>
                <entry key="k1" value="v2"/>
            </map>
        </property>

        <property name="properties">
            <props>
                <prop key="p1">v1</prop>
                <prop key="p2">v2</prop>
            </props>
        </property>&ndash;&gt;






    &lt;!&ndash;</bean>&ndash;&gt;



</beans>-->
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="userDao" class="com.lsy.dao.impl.UserDaoImpl"/>
    <bean id="userService" class="com.lsy.service.impl.UserServiceImpl">
        <property name="userDao" ref="userDao"/>
    </bean>

    <!--通知类-->
    <bean id="MyAspect" class="com.lsy.aop.MyAspect1"/>
    <aop:config>
        <!--
            ref:引用通知类
        -->
        <aop:aspect ref="MyAspect">
            <!--切入点表达式-->
            <aop:pointcut id="pt" expression="execution(* com.lsy.service..*.*(..))"/>
            <!--环绕通知-->
            <!--<aop:around method="aroundAdvice" pointcut-ref="pt"/>-->
            <!--前置通知-->
            <aop:before method="beforeAdvice" pointcut-ref="pt"/>
            <!--后置通知-->
            <aop:after-returning method="afterAdvice" pointcut-ref="pt" returning="result"/>
            <!--异常通知-->
            <aop:after-throwing method="exceptionAdvice" pointcut-ref="pt" throwing="e"/>
            <!--最终通知-->
            <aop:after method="finallyAdvice" pointcut-ref="pt"/>
        </aop:aspect>
    </aop:config>
</beans>